import osmnx as ox
import pandas as pd
import networkx as nx

# Veriyi oluştur (240 koordinatın tamamı)
data = [
    [1, 21491, 38.709714, 35.552545],
    [2, 32221, 38.694468, 35.549217],
    [3, 32551, 38.686098, 35.544537],
    [4, 34648, 38.683598, 35.547565],
    [5, 34979, 38.718040, 35.560715],
    [6, 45814, 38.702162, 35.559672],
    [7, 45815, 38.687164, 35.550951],
    [8, 45820, 38.698343, 35.562090],
    [9, 48814, 38.700988, 35.548052],
    [10, 48815, 38.687353, 35.542635],
    [11, 48816, 38.695120, 35.544678],
    [12, 48817, 38.696653, 35.543631],
    [13, 48818, 38.705762, 35.567009],
    [14, 48819, 38.698912, 35.547992],
    [15, 48820, 38.701193, 35.535305],
    [16, 48821, 38.711400, 35.567342],
    [17, 48822, 38.69833, 35.546088],
    [18, 48841, 38.698913, 35.546135],
    [19, 49197, 38.685962, 35.545703],
    [20, 50509, 38.683132, 35.555130],
    [21, 50511, 38.689245, 35.547813],
    [22, 50513, 38.687063, 35.546002],
    [23, 50518, 38.717287, 35.558672],
    [24, 50520, 38.685613, 35.555353],
    [25, 50522, 38.689161, 35.550979],
    [26, 51226, 38.689893, 35.546687],
    [27, 51230, 38.690155, 35.545688],
    [28, 51232, 38.687132, 35.553012],
    [29, 51234, 38.690173, 35.550170],
    [30, 51236, 38.690879, 35.548120],
    [31, 51238, 38.693440, 35.546237],
    [32, 51239, 38.707147, 35.572967],
    [33, 51240, 38.692951, 35.552383],
    [34, 51241, 38.692877, 35.550357],
    [35, 51243, 38.713285, 35.554910],
    [36, 51244, 38.713285, 35.54758],
    [37, 51248, 38.690093, 35.544108],
    [38, 51249, 38.703122, 35.556314],
    [39, 52730, 38.703122, 35.556314],
    [40, 52731, 38.706758, 35.561263],
    [41, 52732, 38.708935, 35.567443],
    [42, 52733, 38.707420, 35.543517],
    [43, 52734, 38.703477, 35.558763],
    [44, 52735, 38.704928, 35.570295],
    [45, 52742, 38.712582, 35.565630],
    [46, 52743, 38.703132, 35.555182],
    [47, 52745, 38.706030, 35.569480],
    [48, 52746, 38.706282, 35.570610],
    [49, 52749, 38.701843, 35.562127],
    [50, 52751, 38.687507, 35.546833],
    [51, 52753, 38.696077, 35.541513],
    [52, 52754, 38.699300, 35.569075],
    [53, 52755, 38.715882, 35.560077],
    [54, 52756, 38.704818, 35.569377],
    [55, 52757, 38.703498, 35.5616765],
    [56, 52758, 38.709340, 35.565670],
    [57, 52760, 38.708155, 35.553042],
    [58, 52761, 38.701507, 35.559180],
    [59, 52762, 38.693848, 35.541243],
    [60, 52763, 38.712693, 35.558212],
    [61, 52764, 38.706772, 35.549375],
    [62, 52765, 38.705168, 35.556077],
    [63, 52774, 38.706767, 35.557830],
    [64, 52776, 38.702457, 35.562145],
    [65, 52777, 38.711203, 35.562808],
    [66, 52779, 38.696380, 35.552872],
    [67, 52782, 38.698178, 35.556177],
    [68, 52793, 38.704537, 35.561915],
    [69, 52795, 38.713960, 35.562202],
    [70, 52797, 38.692698, 35.545173],
    [71, 52800, 38.701470, 35.551460],
    [72, 52801, 38.697632, 35.547697],
    [73, 52802, 38.694357, 35.557008],
    [74, 52803, 38.702932, 35.55780],
    [75, 52805, 38.703897, 35.549740],
    [76, 52806, 38.704842, 35.552878],
    [77, 52807, 38.709737, 35.552378],
    [78, 52808, 38.701182, 35.544538],
    [79, 52810, 38.693107, 35.549305],
    [80, 52812, 38.693067, 35.543370],
    [81, 52819, 38.700508, 35.551405],
    [82, 52819, 38.700508, 35.551405],
    [83, 52820, 38.692962, 35.561016],
    [84, 52821, 38.701395, 35.553512],
    [85, 52822, 38.701470, 35.562312],
    [86, 52823, 38.701507, 35.567833],
    [87, 52824, 38.701507, 35.567833],
    [88, 52825, 38.70167, 35.567912],
    [89, 52826, 38.7017975, 35.557910],
    [90, 52827, 38.7017975, 35.557910],
    [91, 52828, 38.70182, 35.570055],
    [92, 52829, 38.701930, 35.559743],
    [93, 52830, 38.701930, 35.556002],
    [94, 52831, 38.701930, 35.555353],
    [95, 52832, 38.701930, 35.555353],
    [96, 52833, 38.701745, 35.555645],
    [97, 52834, 38.701745, 35.555653],
    [98, 52835, 38.701762, 35.557913],
    [99, 52836, 38.701930, 35.557912],
    [100, 52837, 38.701930, 35.557435],
    [101, 52903, 38.701580, 35.561907],
    [102, 52904, 38.701930, 35.561313],
    [103, 52916, 38.701930, 35.561313],
    [104, 52917, 38.711753, 35.564518],
    [105, 52918, 38.70152, 35.538385],
    [106, 52919, 38.701750, 35.557558],
    [107, 52920, 38.701750, 35.557512],
    [108, 52921, 38.701790, 35.559217],
    [109, 52922, 38.701930, 35.55937],
    [110, 52923, 38.70190, 35.559677],
    [111, 52924, 38.701930, 35.557575],
    [112, 52925, 38.701767, 35.55315],
    [113, 52926, 38.701750, 35.553575],
    [114, 52927, 38.711740, 35.561933],
    [115, 52928, 38.711850, 35.558972],
    [116, 53235, 38.701267, 35.552787],
    [117, 53237, 38.693365, 35.548150],
    [118, 53238, 38.717095, 35.557497],
    [119, 53239, 38.695587, 35.550482],
    [120, 53240, 38.709675, 35.563582],
    [121, 53242, 38.702307, 35.566162],
    [122, 53243, 38.705518, 35.550400],
    [123, 53244, 38.705278, 35.558078],
    [124, 53245, 38.708065, 35.571262],
    [125, 53246, 38.709755, 35.563747],
    [126, 53247, 38.709432, 35.572467],
    [127, 53248, 38.699942, 35.571377],
    [128, 53249, 38.714393, 35.565012],
    [129, 53251, 38.712507, 35.55838],
    [130, 53253, 38.701372, 35.547660],
    [131, 53254, 38.691110, 35.553033],
    [132, 53257, 38.695850, 35.540265],
    [133, 53258, 38.701583, 35.541508],
    [134, 53260, 38.701452, 35.569202],
    [135, 53261, 38.694982, 35.55343],
    [136, 53262, 38.699640, 35.547265],
    [137, 53264, 38.711332, 35.552400],
    [138, 53265, 38.699438, 35.547616],
    [139, 53266, 38.699438, 35.547616],
    [140, 53270, 38.695287, 35.545342],
    [141, 53271, 38.695287, 35.549388],
    [142, 53272, 38.695287, 35.549388],
    [143, 53273, 38.69369, 35.562343],
    [144, 53278, 38.693850, 35.562343],
    [145, 53279, 38.703885, 35.550880],
    [146, 53281, 38.711577, 35.550618],
    [147, 53282, 38.711577, 35.550618],
    [148, 53283, 38.694988, 35.540885],
    [149, 53284, 38.694988, 35.540885],
    [150, 53285, 38.703802, 35.552388],
    [151, 53290, 38.703765, 35.548370],
    [152, 53291, 38.697140, 35.561742],
    [153, 53292, 38.685260, 35.552927],
    [154, 53293, 38.69362, 35.552927],
    [155, 53294, 38.683462, 35.552938],
    [156, 53295, 38.697970, 35.551653],
    [157, 53296, 38.696832, 35.5516743],
    [158, 53297, 38.684213, 35.550742],
    [159, 53298, 38.694968, 35.552580],
    [160, 53300, 38.695553, 35.548842],
    [161, 53301, 38.696965, 35.549865],
    [162, 53302, 38.694522, 35.543327],
    [163, 53303, 38.684658, 35.548597],
    [164, 53304, 38.694043, 35.544144],
    [165, 53305, 38.69607, 35.550420],
    [166, 53306, 38.698630, 35.556363],
    [167, 53307, 38.698618, 35.556567],
    [168, 53308, 38.700820, 35.555635],
    [169, 53309, 38.701060, 35.545238],
    [170, 53301, 38.694828, 35.56780],
    [171, 53302, 38.690428, 35.570087],
    [172, 53303, 38.686288, 35.5757148],
    [173, 53913, 38.709867, 35.569257],
    [174, 53915, 38.698090, 35.552587],
    [175, 53917, 38.710607, 35.551047],
    [176, 53919, 38.704257, 35.552485],
    [177, 55258, 38.708167, 35.567783],
    [178, 55419, 38.699074, 35.55035],
    [179, 55421, 38.712037, 35.557532],
    [180, 55423, 38.709595, 35.570493],
    [181, 55425, 38.716809, 35.561488],
    [182, 55430, 38.703363, 35.551937],
    [183, 55431, 38.700493, 35.550245],
    [184, 55433, 38.697990, 35.549125],
    [185, 55438, 38.705395, 35.550540],
    [186, 55440, 38.701915, 35.557212],
    [187, 55442, 38.701915, 35.5575212],
    [188, 55444, 38.691895, 35.560675],
    [189, 55446, 38.695847, 35.542625],
    [190, 55450, 38.699323, 35.542932],
    [191, 55450, 38.709647, 35.562843],
    [192, 55454, 38.692715, 35.548283],
    [193, 55454, 38.690722, 35.550908],
    [194, 55455, 38.697270, 35.545022],
    [195, 55456, 38.690117, 35.549198],
    [196, 55457, 38.687617, 35.546893],
    [197, 55459, 38.685658, 35.54717],
    [198, 55460, 38.685657, 35.547985],
    [199, 55461, 38.687335, 35.547272],
    [200, 55462, 38.685873, 35.552527],
    [201, 55474, 38.685858, 35.550913],
    [202, 55476, 38.691808, 35.549808],
    [203, 55527, 38.691370, 35.551563],
    [204, 55529, 38.687677, 35.555200],
    [205, 55531, 38.686935, 35.554342],
    [206, 55533, 38.687603, 35.553898],
    [207, 55535, 38.686935, 35.550313],
    [208, 63499, 38.695045, 35.545130],
    [209, 63501, 38.69535, 35.547505],
    [210, 63505, 38.707312, 35.5625252],
    [211, 63507, 38.703813, 35.564507],
    [212, 63509, 38.703185, 35.564542],
    [213, 63514, 38.699894, 35.563535],
    [214, 63516, 38.700020, 35.543175],
    [215, 63518, 38.691420, 35.553862],
    [216, 63520, 38.700450, 35.538187],
    [217, 64565, 38.702683, 35.565215],
    [218, 64566, 38.706033, 35.5656780],
    [219, 64567, 38.699850, 35.565410],
    [220, 64569, 38.699437, 35.572653],
    [221, 64570, 38.711013, 35.564305],
    [222, 64575, 38.707722, 35.563567],
    [223, 64576, 38.693437, 35.550548],
    [224, 64586, 38.699768, 35.570580],
    [225, 64587, 38.699957, 35.570798],
    [226, 64588, 38.707813, 35.564575],
    [227, 64589, 38.707297, 35.566095],
    [228, 64590, 38.708528, 35.558585],
    [229, 64591, 38.714260, 35.559250],
    [230, 64592, 38.718083, 35.555925],
    [231, 64593, 38.705730, 35.561447],
    [232, 64594, 38.701888, 35.572043],
    [233, 68723, 38.706474, 35.569582],
    [234, 68728, 38.697621, 35.546254],
    [235, 68733, 38.716555, 35.559173],
    [236, 78920, 38.684813, 35.551763],
    [237, 78921, 38.692311, 35.542481],
    [238, 78922, 38.691618, 35.546763],
    [239, 79157, 38.696029, 35.545350],
    [240, 79159, 38.714675, 35.558583]
]

# DataFrame oluştur
df = pd.DataFrame(data, columns=['Sira', 'No', 'Enlem', 'Boylam'])

# Referans nokta
ref_point = (38.684962, 35.567250)

# Yol ağı grafiğini indir (10 km yarıçap)
G = ox.graph_from_point(ref_point, dist=10000, network_type='drive')

# Grafiğin bağlantılılığını kontrol et (NetworkX ile)
print("Grafik bağlantılı mı?", nx.is_strongly_connected(G))

# Referans noktayı eşle
ref_node = ox.distance.nearest_nodes(G, ref_point[1], ref_point[0])
print(f"Referans nokta düğümü: {ref_node}")

# Tüm koordinatları eşle
nodes = []
for idx, row in df.iterrows():
    node = ox.distance.nearest_nodes(G, row['Boylam'], row['Enlem'])
    nodes.append(node)
    print(f"Sıra {row['Sira']}, No {row['No']}: En yakın düğüm = {node}")
df['Node'] = nodes

# Mesafeleri hesapla ve hata ayıklama yap
distances = []
for idx, node in enumerate(df['Node']):
    try:
        # NetworkX ile mesafe hesapla
        distance = nx.shortest_path_length(G, ref_node, node, weight='length')
        distances.append(distance)
    except Exception as e:
        print(f"Hata - Sıra {df.iloc[idx]['Sira']}, No {df.iloc[idx]['No']}: {str(e)}")
        distances.append(None)
df['Mesafe (metre)'] = distances

# Sonuçları kaydet
result_df = df[['Sira', 'No', 'Enlem', 'Boylam', 'Mesafe (metre)']]
result_df.to_csv('mesafeler.csv', index=False)

# İlk 5 satırı ve None olanları göster
print("İlk 5 satır:")
print(result_df.head())
print("\nNone olan satırlar:")
print(result_df[result_df['Mesafe (metre)'].isna()])